// 0/1 knapsack problem solved by all 3 method 
//1.memoization
//2.tabulation
//3.space optimization


//memoization

/*class Solution{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    
int solve(int wt[],int val[],int w,int i, vector<vector<int>>&dp){
     
   if(i==0){
       if(w>=wt[0])return val[0];
       else return 0;
   }  
    
 if(dp[i][w]!=-1)return dp[i][w];
 
 int not_take = solve(wt,val,w,i-1,dp);
 int take=INT_MIN;
 if(w>=wt[i])take=val[i]+solve(wt,val,w-wt[i],i-1,dp);
 
 return dp[i][w]=max(take,not_take);

 }   
    
    
    
int knapSack(int w, int wt[], int val[], int n) { 
      
      vector<vector<int>>dp(n,vector<int>(w+1,-1));
      
      return solve(wt,val,w,n-1,dp);
    
    }
};
*/












//tabulation

/*
class Solution{
    public:
  
int knapSack(int w, int wt[], int val[], int n) { 
      
      vector<vector<int>>dp(n,vector<int>(w+1,0));
      
 for(int i=0;i<n;i++)dp[i][0]=0;
 
 for(int j=0;j<=w;j++){
     if(j>=wt[0])dp[0][j]=val[0];
     else dp[0][j]=0;
 }
 
 for(int i=1;i<n;i++){
     for(int j=1;j<=w;j++){
         
  int take=INT_MIN;
  if(j>=wt[i])take=val[i]+dp[i-1][j-wt[i]];
  
  int not_take=dp[i-1][j];
  
         
  dp[i][j]=max(take,not_take);       
         
     }
 }
 
 
return dp[n-1][w];
    
    }
 
    
};

*/




//space optimization


class Solution{
    public:
  
int knapSack(int w, int wt[], int val[], int n) { 
      
//int prev[w+1];
//int curr[w+1];
vector<int>prev(w+1,0);
vector<int>curr(w+1,0);


for(int k=wt[0];k<=w;k++)prev[k]=val[0];


for(int i=1;i<n;i++){
    for(int j=1;j<=w;j++){
        
        int not_take=prev[j]+0;
        int take=INT_MIN;
        if(j>=wt[i])take=val[i]+prev[j-wt[i]];
        
    curr[j]=max(take,not_take);
    }
    
    prev=curr;
}

return prev[w];


    
    }
};

